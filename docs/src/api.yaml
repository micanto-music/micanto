openapi: 3.0.3
info:
  title: Micanto Api
  version: 1.0.0
  description: 'The API for [Micanto](https://micanto.js.org)'
  contact:
    name: Andr√© Rinas
    url: 'https://www.andrerinas.de/'
    email: info@andrerinas.de
  license:
    name: MIT
    url: 'https://github.com/micanto-music/micanto/blob/main/LICENSE.md'
servers:
  - url: 'https://micanto.test'
    description: Local
paths:
  /api/login:
    post:
      summary: 'Login user'
      description: 'Login a user. Will return a token for future requests.'
      tags:
        - authentication
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                password:
                  type: string
                  format: password
              required:
                - email
                - password
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                required:
                  - token
  /api/user:
    get:
      summary: Get a current loggedin user
      tags:
        - user
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
      security:
        - Bearer Token: [ ]
    post:
      summary: Add a user
      description: Add a new user
      tags:
        - user
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                email:
                  type: string
                  format: email
                password:
                  type: string
                  format: password
                is_admin:
                  type: boolean
              required:
                - name
                - email
                - password
                - is_admin
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
  /api/profile/{userId}:
    parameters:
      - schema:
          type: integer
        name: userId
        in: path
        required: true
        description: ID of the user
    post:
      summary: Update a user
      description: Update a user via user id
      security:
        - Bearer Token: [ ]
      tags:
        - user
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
  /api/users:
    get:
      summary: Get users
      description: Get a list of all users
      security:
        - Bearer Token: [ ]
      tags:
        - user
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  results:
                    type: object
  /api/search:
    get:
      summary: Search
      description: Search for albums, artists and tracks
      tags:
        - search
      security:
        - Bearer Token: [ ]
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  results:
                    type: object
                    required:
                      - tracks
                      - artists
                      - albums
                    properties:
                      tracks:
                        type: array
                        description: An array of max 5 best-matching tracks
                        items:
                          type: string
                      artists:
                        type: array
                        description: An array of max 5 best-matching artists
                        items:
                          type: integer
                      albums:
                        type: array
                        description: An array of max 5 best-matching albums
                        items:
                          type: number
                      top:
                        type: object
                        description: The top result for the search term. Can be, track, artist or album
      parameters:
        - schema:
            type: string
          in: query
          name: term
          description: The keywords to search
          required: true

  /api/player/play/{trackId}:
    parameters:
      - schema:
          type: integer
        name: trackId
        in: path
        required: true
        description: ID of the song
    get:
      summary: Play a track
      tags:
        - player
      responses: { }
      description: 'The GET request to play/stream a track.'
      security:
        - Bearer Token: [ ]
  /api/player/updateSession:
    post:
      summary: Update the listening session
      description: Update the listening session for resume where you leaved
      security:
        - Bearer Token: [ ]
      tags:
        - player
      responses: { }
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                track:
                  type: integer
                time:
                  type: integer
                context:
                  type: object
              required:
                - track
                - time
                - context
  /api/player/played:
    post:
      summary: Mark a track as played
      description: Increment the play count of the given track
      security:
        - Bearer Token: [ ]
      tags:
        - player
      responses: { }
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                track:
                  type: integer
  /api/player/getQueue:
    post:
      summary: Get queue
      description: Get the queue based on the listening context
      security:
        - Bearer Token: [ ]
      tags:
        - player
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Queue'

  /api/playlists:
    get:
      summary: Get playlists
      description: Get all playlists of current user
      security:
        - Bearer Token: [ ]
      tags:
        - playlist
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Playlists'
  /api/playlist:
    put:
      summary: Add playlist
      description: Add a playlist
      security:
        - Bearer Token: [ ]
      tags:
        - playlist
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Playlist'
  /api/playlist/{playlistId}:
    parameters:
      - schema:
          type: integer
        name: playlistId
        in: path
        required: true
        description: ID of the playlist
    get:
      summary: Get playlist
      description: Get playlist by id
      security:
        - Bearer Token: [ ]
      tags:
        - playlist
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Playlist'
    post:
      summary: Update playlist
      description: Update a playlist
      security:
        - Bearer Token: [ ]
      tags:
        - playlist
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Playlist'
    delete:
      summary: Delete playlist
      description: Delete a playlist
      security:
        - Bearer Token: [ ]
      tags:
        - playlist
      responses: { }
  /api/playlist/{playlistId}/addItems:
    parameters:
      - schema:
          type: integer
        name: playlistId
        in: path
        required: true
        description: ID of the playlist where to add items
    post:
      summary: Add items to playlist
      description: Add items to playlist
      security:
        - Bearer Token: [ ]
      tags:
        - playlist
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                type:
                  type: string
                ids:
                  type: array
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Playlist'
  /api/playlist/{playlistId}/deleteItems:
    parameters:
      - schema:
          type: integer
        name: playlistId
        in: path
        required: true
        description: ID of the playlist where to delete items
    post:
      summary: Remove items from playlist
      description: Remove items from playlist
      security:
        - Bearer Token: [ ]
      tags:
        - playlist
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                type:
                  type: string
                ids:
                  type: array
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Playlist'

  /api/albums:
    get:
      summary: Get all albums
      description: Get all albums
      security:
        - Bearer Token: [ ]
      tags:
        - album
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Albums'
  /api/album/{albumId}:
    parameters:
      - schema:
          type: integer
        name: albumId
        in: path
        required: true
        description: ID of the album
    get:
      summary: Get album
      description: Get album by id
      security:
        - Bearer Token: [ ]
      tags:
        - album
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Album'
    post:
      summary: Update album
      description: Update an album
      security:
        - Bearer Token: [ ]
      tags:
        - album
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Album'
  /api/combineAlbums:
    post:
      summary: Combine albums
      description: Combine 2 or more albums to one
      tags:
        - album
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                albums:
                  type: array
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  removed:
                    type: array
                    items:
                      $ref: '#/components/schemas/Album'
                  albums:
                    type: string
  /api/artists:
    get:
      summary: Get all artists
      description: Get all artists
      security:
        - Bearer Token: [ ]
      tags:
        - artist
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Artists'
  /api/artist/{artistId}:
    parameters:
      - schema:
          type: integer
        name: artistId
        in: path
        required: true
        description: ID of the artist
    get:
      summary: Get artist
      description: Get artist by id
      security:
        - Bearer Token: [ ]
      tags:
        - artist
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Artist'
    post:
      summary: Update artist
      description: Update an artist
      security:
        - Bearer Token: [ ]
      tags:
        - artist
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Artist'
  /api/tracks?page={page}&sort={sortField}&order={order}:
    parameters:
      - schema:
          type: integer
        name: page
        in: path
        required: true
        description: number of page for pagination
      - schema:
          type: string
        name: sortField
        in: path
        description: how should the list be sorted
      - schema:
          type: string
        name: order
        in: path
        description: Ascending or descending order
    get:
      summary: Get all tracks
      description: Get all tracks
      security:
        - Bearer Token: [ ]
      tags:
        - track
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tracks'
  /api/tracks:
    post:
      summary: Update tracks
      description: Update one or more tracks
      tags:
        - track
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                tracks:
                  type: array
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  tracks:
                    type: array
                    items:
                      $ref: '#/components/schemas/Track'
tags:
  - name: authentication
  - name: user
  - name: search
  - name: player
  - name: playlist
  - name: album
  - name: artist
  - name: track

components:
  schemas:
    User:
      title: User
      type: object
      description: A User model
      properties:
        id:
          type: integer
        name:
          type: string
        email:
          type: string
        is_admin:
          type: boolean
    Track:
      title: Track
      description: A Track model
      properties:
          type:
            type: string
          url:
            type: string
          id:
            type: integer
          title:
            type: string
          cover:
            type: string
          album:
            type: string
          album_id:
            type: integer
          duration:
            type: integer
          track:
            type: integer
          disc:
            type: integer
          year:
            type: integer
          genre:
            type: string
          lyrics:
            type: string
          artists:
            type: array
            items:
              $ref: '#/components/schemas/Artist'
          added_at:
            type: string
    Tracks:
      title: Tracks
      type: array
      description: An array of Tracks
      items:
        $ref: '#/components/schemas/Track'
    Artist:
      title: Artist
      description: An Artist model
      properties:
          type:
            type: string
          id:
            type: integer
          name:
            type: string
          image:
            type: string
          created_at:
            type: string
    Artists:
      title: Artists
      type: array
      description: An array of Artists
      items:
        $ref: '#/components/schemas/Artist'
    Queue:
      title: Queue
      type: array
      description: An array of Tracks to play next
      items:
        $ref: '#/components/schemas/Track'
    Playlist:
      title: Playlist
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        tracks_count:
          type: integer
        cover:
          type: string
        updated_at:
          type: string
    Playlists:
      title: Playlists
      type: array
      description: An array of Playlists
      items:
        $ref: '#/components/schemas/Playlist'
    Album:
      title: Album
      type: object
      properties:
        type:
          type: string
        id:
          type: integer
        name:
          type: string
        artist:
          type: object
          properties:
            id:
              type: integer
            name:
              type: integer
        cover:
          type: string
        is_compilation:
          type: boolean
        is_single:
          type: boolean
        year:
          type: integer
    Albums:
      title: Albums
      type: array
      description: An array of Albums
      items:
        $ref: '#/components/schemas/Album'
  securitySchemes:
    Bearer Token:
      type: http
      scheme: bearer
